"use strict";
const util_1 = require("../lib/util");
module.exports = {
    parseMethodResourcePath: {
        'fails if path does not start with a /'(test) {
            test.throws(() => util_1.parseMethodOptionsPath('foo'), /Method options path must start with \'\/\'/);
            test.done();
        },
        'fails if there are less than two components'(test) {
            test.throws(() => util_1.parseMethodOptionsPath('/'), /Method options path must include at least two components/);
            test.throws(() => util_1.parseMethodOptionsPath('/foo'), /Method options path must include at least two components/);
            test.throws(() => util_1.parseMethodOptionsPath('/foo/'), /Invalid HTTP method ""/);
            test.done();
        },
        'fails if a non-supported http method is used'(test) {
            test.throws(() => util_1.parseMethodOptionsPath('/foo/bar'), /Invalid HTTP method "BAR"/);
            test.done();
        },
        'extracts resource path and method correctly'(test) {
            test.deepEqual(util_1.parseMethodOptionsPath('/foo/GET'), { resourcePath: '/~1foo', httpMethod: 'GET' });
            test.deepEqual(util_1.parseMethodOptionsPath('/foo/bar/GET'), { resourcePath: '/~1foo~1bar', httpMethod: 'GET' });
            test.deepEqual(util_1.parseMethodOptionsPath('/foo/*/GET'), { resourcePath: '/~1foo~1*', httpMethod: 'GET' });
            test.deepEqual(util_1.parseMethodOptionsPath('/*/GET'), { resourcePath: '/*', httpMethod: 'GET' });
            test.deepEqual(util_1.parseMethodOptionsPath('/*/*'), { resourcePath: '/*', httpMethod: '*' });
            test.deepEqual(util_1.parseMethodOptionsPath('//POST'), { resourcePath: '/', httpMethod: 'POST' });
            test.done();
        }
    },
    parseAwsApiCall: {
        'fails if "actionParams" is set but "action" is undefined'(test) {
            test.throws(() => util_1.parseAwsApiCall(undefined, undefined, { foo: '123' }), /"actionParams" requires that "action" will be set/);
            test.done();
        },
        'fails since "action" and "path" are mutually exclusive'(test) {
            test.throws(() => util_1.parseAwsApiCall('foo', 'bar'), /"path" and "action" are mutually exclusive \(path="foo", action="bar"\)/);
            test.done();
        },
        'fails if "path" and "action" are both undefined'(test) {
            test.throws(() => util_1.parseAwsApiCall(), /Either "path" or "action" are required/);
            test.done();
        },
        '"path" mode'(test) {
            test.deepEqual(util_1.parseAwsApiCall('my/path'), { apiType: 'path', apiValue: 'my/path' });
            test.done();
        },
        '"action" mode with no parameters'(test) {
            test.deepEqual(util_1.parseAwsApiCall(undefined, 'MyAction'), { apiType: 'action', apiValue: 'MyAction' });
            test.done();
        },
        '"action" mode with parameters (url-encoded)'(test) {
            test.deepEqual(util_1.parseAwsApiCall(undefined, 'GetObject', { Bucket: 'MyBucket', Key: 'MyKey' }), {
                apiType: 'action',
                apiValue: 'GetObject&Bucket=MyBucket&Key=MyKey'
            });
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxzQ0FBc0U7QUFFdEUsaUJBQVM7SUFDUCx1QkFBdUIsRUFBRTtRQUN2Qix1Q0FBdUMsQ0FBQyxJQUFVO1lBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsNkJBQXNCLENBQUMsS0FBSyxDQUFDLEVBQUUsNENBQTRDLENBQUMsQ0FBQztZQUMvRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO1FBRUQsNkNBQTZDLENBQUMsSUFBVTtZQUN0RCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLDZCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFLDBEQUEwRCxDQUFDLENBQUM7WUFDM0csSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyw2QkFBc0IsQ0FBQyxNQUFNLENBQUMsRUFBRSwwREFBMEQsQ0FBQyxDQUFDO1lBQzlHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsNkJBQXNCLENBQUMsT0FBTyxDQUFDLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztZQUM3RSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO1FBRUQsOENBQThDLENBQUMsSUFBVTtZQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLDZCQUFzQixDQUFDLFVBQVUsQ0FBQyxFQUFFLDJCQUEyQixDQUFDLENBQUM7WUFDbkYsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELDZDQUE2QyxDQUFDLElBQVU7WUFDdEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyw2QkFBc0IsQ0FBQyxVQUFVLENBQUMsRUFBSSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDcEcsSUFBSSxDQUFDLFNBQVMsQ0FBQyw2QkFBc0IsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDM0csSUFBSSxDQUFDLFNBQVMsQ0FBQyw2QkFBc0IsQ0FBQyxZQUFZLENBQUMsRUFBSSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDekcsSUFBSSxDQUFDLFNBQVMsQ0FBQyw2QkFBc0IsQ0FBQyxRQUFRLENBQUMsRUFBTSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDaEcsSUFBSSxDQUFDLFNBQVMsQ0FBQyw2QkFBc0IsQ0FBQyxNQUFNLENBQUMsRUFBTSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDNUYsSUFBSSxDQUFDLFNBQVMsQ0FBQyw2QkFBc0IsQ0FBQyxRQUFRLENBQUMsRUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDaEcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztLQUNGO0lBRUQsZUFBZSxFQUFFO1FBQ2YsMERBQTBELENBQUMsSUFBVTtZQUNuRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHNCQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLG1EQUFtRCxDQUFDLENBQUM7WUFDOUgsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELHdEQUF3RCxDQUFDLElBQVU7WUFDakUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBZSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSx5RUFBeUUsQ0FBQyxDQUFDO1lBQzVILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUM7UUFFRCxpREFBaUQsQ0FBQyxJQUFVO1lBQzFELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQWUsRUFBRSxFQUFFLHdDQUF3QyxDQUFDLENBQUM7WUFDL0UsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELGFBQWEsQ0FBQyxJQUFVO1lBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQWUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7WUFDckYsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELGtDQUFrQyxDQUFDLElBQVU7WUFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBZSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDcEcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUVELDZDQUE2QyxDQUFDLElBQVU7WUFDdEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBZSxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFO2dCQUM1RixPQUFPLEVBQUUsUUFBUTtnQkFDakIsUUFBUSxFQUFFLHFDQUFxQzthQUNoRCxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IHBhcnNlQXdzQXBpQ2FsbCwgcGFyc2VNZXRob2RPcHRpb25zUGF0aCB9IGZyb20gJy4uL2xpYi91dGlsJztcblxuZXhwb3J0ID0ge1xuICBwYXJzZU1ldGhvZFJlc291cmNlUGF0aDoge1xuICAgICdmYWlscyBpZiBwYXRoIGRvZXMgbm90IHN0YXJ0IHdpdGggYSAvJyh0ZXN0OiBUZXN0KSB7XG4gICAgICB0ZXN0LnRocm93cygoKSA9PiBwYXJzZU1ldGhvZE9wdGlvbnNQYXRoKCdmb28nKSwgL01ldGhvZCBvcHRpb25zIHBhdGggbXVzdCBzdGFydCB3aXRoIFxcJ1xcL1xcJy8pO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdmYWlscyBpZiB0aGVyZSBhcmUgbGVzcyB0aGFuIHR3byBjb21wb25lbnRzJyh0ZXN0OiBUZXN0KSB7XG4gICAgICB0ZXN0LnRocm93cygoKSA9PiBwYXJzZU1ldGhvZE9wdGlvbnNQYXRoKCcvJyksIC9NZXRob2Qgb3B0aW9ucyBwYXRoIG11c3QgaW5jbHVkZSBhdCBsZWFzdCB0d28gY29tcG9uZW50cy8pO1xuICAgICAgdGVzdC50aHJvd3MoKCkgPT4gcGFyc2VNZXRob2RPcHRpb25zUGF0aCgnL2ZvbycpLCAvTWV0aG9kIG9wdGlvbnMgcGF0aCBtdXN0IGluY2x1ZGUgYXQgbGVhc3QgdHdvIGNvbXBvbmVudHMvKTtcbiAgICAgIHRlc3QudGhyb3dzKCgpID0+IHBhcnNlTWV0aG9kT3B0aW9uc1BhdGgoJy9mb28vJyksIC9JbnZhbGlkIEhUVFAgbWV0aG9kIFwiXCIvKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnZmFpbHMgaWYgYSBub24tc3VwcG9ydGVkIGh0dHAgbWV0aG9kIGlzIHVzZWQnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIHRlc3QudGhyb3dzKCgpID0+IHBhcnNlTWV0aG9kT3B0aW9uc1BhdGgoJy9mb28vYmFyJyksIC9JbnZhbGlkIEhUVFAgbWV0aG9kIFwiQkFSXCIvKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnZXh0cmFjdHMgcmVzb3VyY2UgcGF0aCBhbmQgbWV0aG9kIGNvcnJlY3RseScodGVzdDogVGVzdCkge1xuICAgICAgdGVzdC5kZWVwRXF1YWwocGFyc2VNZXRob2RPcHRpb25zUGF0aCgnL2Zvby9HRVQnKSwgICB7IHJlc291cmNlUGF0aDogJy9+MWZvbycsIGh0dHBNZXRob2Q6ICdHRVQnIH0pO1xuICAgICAgdGVzdC5kZWVwRXF1YWwocGFyc2VNZXRob2RPcHRpb25zUGF0aCgnL2Zvby9iYXIvR0VUJyksIHsgcmVzb3VyY2VQYXRoOiAnL34xZm9vfjFiYXInLCBodHRwTWV0aG9kOiAnR0VUJyB9KTtcbiAgICAgIHRlc3QuZGVlcEVxdWFsKHBhcnNlTWV0aG9kT3B0aW9uc1BhdGgoJy9mb28vKi9HRVQnKSwgICB7IHJlc291cmNlUGF0aDogJy9+MWZvb34xKicsIGh0dHBNZXRob2Q6ICdHRVQnIH0pO1xuICAgICAgdGVzdC5kZWVwRXF1YWwocGFyc2VNZXRob2RPcHRpb25zUGF0aCgnLyovR0VUJyksICAgICB7IHJlc291cmNlUGF0aDogJy8qJywgaHR0cE1ldGhvZDogJ0dFVCcgfSk7XG4gICAgICB0ZXN0LmRlZXBFcXVhbChwYXJzZU1ldGhvZE9wdGlvbnNQYXRoKCcvKi8qJyksICAgICB7IHJlc291cmNlUGF0aDogJy8qJywgaHR0cE1ldGhvZDogJyonIH0pO1xuICAgICAgdGVzdC5kZWVwRXF1YWwocGFyc2VNZXRob2RPcHRpb25zUGF0aCgnLy9QT1NUJyksICAgICB7IHJlc291cmNlUGF0aDogJy8nLCBodHRwTWV0aG9kOiAnUE9TVCcgfSk7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9XG4gIH0sXG5cbiAgcGFyc2VBd3NBcGlDYWxsOiB7XG4gICAgJ2ZhaWxzIGlmIFwiYWN0aW9uUGFyYW1zXCIgaXMgc2V0IGJ1dCBcImFjdGlvblwiIGlzIHVuZGVmaW5lZCcodGVzdDogVGVzdCkge1xuICAgICAgdGVzdC50aHJvd3MoKCkgPT4gcGFyc2VBd3NBcGlDYWxsKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7IGZvbzogJzEyMycgfSksIC9cImFjdGlvblBhcmFtc1wiIHJlcXVpcmVzIHRoYXQgXCJhY3Rpb25cIiB3aWxsIGJlIHNldC8pO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdmYWlscyBzaW5jZSBcImFjdGlvblwiIGFuZCBcInBhdGhcIiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlJyh0ZXN0OiBUZXN0KSB7XG4gICAgICB0ZXN0LnRocm93cygoKSA9PiBwYXJzZUF3c0FwaUNhbGwoJ2ZvbycsICdiYXInKSwgL1wicGF0aFwiIGFuZCBcImFjdGlvblwiIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgXFwocGF0aD1cImZvb1wiLCBhY3Rpb249XCJiYXJcIlxcKS8pO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdmYWlscyBpZiBcInBhdGhcIiBhbmQgXCJhY3Rpb25cIiBhcmUgYm90aCB1bmRlZmluZWQnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIHRlc3QudGhyb3dzKCgpID0+IHBhcnNlQXdzQXBpQ2FsbCgpLCAvRWl0aGVyIFwicGF0aFwiIG9yIFwiYWN0aW9uXCIgYXJlIHJlcXVpcmVkLyk7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ1wicGF0aFwiIG1vZGUnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIHRlc3QuZGVlcEVxdWFsKHBhcnNlQXdzQXBpQ2FsbCgnbXkvcGF0aCcpLCB7IGFwaVR5cGU6ICdwYXRoJywgYXBpVmFsdWU6ICdteS9wYXRoJyB9KTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnXCJhY3Rpb25cIiBtb2RlIHdpdGggbm8gcGFyYW1ldGVycycodGVzdDogVGVzdCkge1xuICAgICAgdGVzdC5kZWVwRXF1YWwocGFyc2VBd3NBcGlDYWxsKHVuZGVmaW5lZCwgJ015QWN0aW9uJyksIHsgYXBpVHlwZTogJ2FjdGlvbicsIGFwaVZhbHVlOiAnTXlBY3Rpb24nIH0pO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdcImFjdGlvblwiIG1vZGUgd2l0aCBwYXJhbWV0ZXJzICh1cmwtZW5jb2RlZCknKHRlc3Q6IFRlc3QpIHtcbiAgICAgIHRlc3QuZGVlcEVxdWFsKHBhcnNlQXdzQXBpQ2FsbCh1bmRlZmluZWQsICdHZXRPYmplY3QnLCB7IEJ1Y2tldDogJ015QnVja2V0JywgS2V5OiAnTXlLZXknIH0pLCB7XG4gICAgICAgIGFwaVR5cGU6ICdhY3Rpb24nLFxuICAgICAgICBhcGlWYWx1ZTogJ0dldE9iamVjdCZCdWNrZXQ9TXlCdWNrZXQmS2V5PU15S2V5J1xuICAgICAgfSk7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9XG4gIH1cbn07XG4iXX0=