"use strict";
const assert_1 = require("@aws-cdk/assert");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const ecs = require("../../lib");
module.exports = {
    "When creating an ECS TaskDefinition": {
        "with only required properties set, it correctly sets default properties"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::TaskDefinition", {
                Family: "Ec2TaskDef",
                ContainerDefinitions: [],
                Volumes: [],
                NetworkMode: ecs.NetworkMode.BRIDGE,
                RequiresCompatibilities: ["EC2"]
            }));
            // test error if no container defs?
            test.done();
        },
        "correctly sets network mode"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                networkMode: ecs.NetworkMode.AWS_VPC
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::TaskDefinition", {
                NetworkMode: ecs.NetworkMode.AWS_VPC,
            }));
            test.done();
        },
        "correctly sets containers"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            const container = taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512 // add validation?
            });
            // TODO test other containerDefinition methods
            container.addPortMappings({
                containerPort: 3000
            });
            container.addUlimits({
                hardLimit: 128,
                name: ecs.UlimitName.RSS,
                softLimit: 128
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::TaskDefinition", {
                Family: "Ec2TaskDef",
                ContainerDefinitions: [{
                        Essential: true,
                        Memory: 512,
                        Image: "amazon/amazon-ecs-sample",
                        Links: [],
                        MountPoints: [],
                        Name: "web",
                        PortMappings: [{
                                ContainerPort: 3000,
                                HostPort: 0,
                                Protocol: aws_ec2_1.Protocol.TCP
                            }],
                        Ulimits: [{
                                HardLimit: 128,
                                Name: "rss",
                                SoftLimit: 128
                            }],
                        VolumesFrom: []
                    }],
            }));
            test.done();
        },
        "correctly sets scratch space"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            const container = taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            container.addScratch({
                containerPath: "./cache",
                readOnly: true,
                sourcePath: "/tmp/cache",
                name: "scratch"
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::ECS::TaskDefinition", {
                Family: "Ec2TaskDef",
                ContainerDefinitions: [{
                        MountPoints: [
                            {
                                ContainerPath: "./cache",
                                ReadOnly: true,
                                SourceVolume: "scratch"
                            }
                        ]
                    }],
                Volumes: [{
                        Host: {
                            SourcePath: "/tmp/cache"
                        },
                        Name: "scratch"
                    }]
            }));
            test.done();
        },
        "correctly sets volumes"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const volume = {
                host: {
                    sourcePath: "/tmp/cache",
                },
                name: "scratch"
            };
            // Adding volumes via props is a bit clunky
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                volumes: [volume]
            });
            const container = taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            // this needs to be a better API -- should auto-add volumes
            container.addMountPoints({
                containerPath: "./cache",
                readOnly: true,
                sourceVolume: "scratch",
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::ECS::TaskDefinition", {
                Family: "Ec2TaskDef",
                ContainerDefinitions: [{
                        MountPoints: [
                            {
                                ContainerPath: "./cache",
                                ReadOnly: true,
                                SourceVolume: "scratch"
                            }
                        ]
                    }],
                Volumes: [{
                        Host: {
                            SourcePath: "/tmp/cache"
                        },
                        Name: "scratch"
                    }]
            }));
            test.done();
        },
        "correctly sets placement constraints"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                placementConstraints: [
                    ecs.PlacementConstraint.memberOf("attribute:ecs.instance-type =~ t2.*"),
                ]
            });
            taskDefinition.addContainer("web", {
                memoryLimitMiB: 1024,
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample")
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::TaskDefinition", {
                PlacementConstraints: [
                    {
                        Expression: "attribute:ecs.instance-type =~ t2.*",
                        Type: "memberOf"
                    }
                ]
            }));
            test.done();
        },
        "correctly sets taskRole"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                taskRole: new iam.Role(stack, 'TaskRole', {
                    assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),
                })
            });
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::ECS::TaskDefinition", {
                TaskRoleArn: stack.resolve(taskDefinition.taskRole.roleArn)
            }));
            test.done();
        },
        "correctly sets dockerVolumeConfiguration"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const volume = {
                name: "scratch",
                dockerVolumeConfiguration: {
                    driver: "local",
                    scope: ecs.Scope.TASK
                }
            };
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                volumes: [volume]
            });
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::ECS::TaskDefinition", {
                Family: "Ec2TaskDef",
                Volumes: [{
                        Name: "scratch",
                        DockerVolumeConfiguration: {
                            Driver: "local",
                            Scope: 'task'
                        }
                    }]
            }));
            test.done();
        },
    }
};
//# sourceMappingURL=data:application/json;base64,