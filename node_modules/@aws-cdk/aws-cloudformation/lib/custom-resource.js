"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const cloudformation_generated_1 = require("./cloudformation.generated");
class CustomResourceProvider {
    constructor(serviceToken) {
        this.serviceToken = serviceToken;
    }
    /**
     * The Lambda provider that implements this custom resource.
     *
     * We recommend using a lambda.SingletonFunction for this.
     */
    static lambda(handler) { return new CustomResourceProvider(handler.functionArn); }
    /**
     * The SNS Topic for the provider that implements this custom resource.
     */
    static topic(topic) { return new CustomResourceProvider(topic.topicArn); }
}
exports.CustomResourceProvider = CustomResourceProvider;
/**
 * Custom resource that is implemented using a Lambda
 *
 * As a custom resource author, you should be publishing a subclass of this class
 * that hides the choice of provider, and accepts a strongly-typed properties
 * object with the properties your provider accepts.
 */
class CustomResource extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        const type = renderResourceType(props.resourceType);
        this.resource = new core_1.CfnResource(this, 'Default', {
            type,
            properties: {
                ServiceToken: props.provider.serviceToken,
                ...uppercaseProperties(props.properties || {})
            }
        });
        this.resource.applyRemovalPolicy(props.removalPolicy, { default: core_1.RemovalPolicy.DESTROY });
    }
    getAtt(attributeName) {
        return this.resource.getAtt(attributeName);
    }
}
exports.CustomResource = CustomResource;
/**
 * Uppercase the first letter of every property name
 *
 * It's customary for CloudFormation properties to start with capitals, and our
 * properties to start with lowercase, so this function translates from one
 * to the other
 */
function uppercaseProperties(props) {
    const ret = {};
    Object.keys(props).forEach(key => {
        const upper = key.substr(0, 1).toUpperCase() + key.substr(1);
        ret[upper] = props[key];
    });
    return ret;
}
function renderResourceType(resourceType) {
    if (!resourceType) {
        return cloudformation_generated_1.CfnCustomResource.CFN_RESOURCE_TYPE_NAME;
    }
    if (!resourceType.startsWith('Custom::')) {
        throw new Error(`Custom resource type must begin with "Custom::" (${resourceType})`);
    }
    const typeName = resourceType.substr(resourceType.indexOf('::') + 2);
    if (typeName.length > 60) {
        throw new Error(`Custom resource type length > 60 (${resourceType})`);
    }
    if (!/^[a-z0-9_@-]+$/i.test(typeName)) {
        throw new Error(`Custom resource type name can only include alphanumeric characters and _@- (${typeName})`);
    }
    return resourceType;
}
//# sourceMappingURL=data:application/json;base64,