"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cfn = require("@aws-cdk/aws-cloudformation");
const ecr = require("@aws-cdk/aws-ecr");
const iam = require("@aws-cdk/aws-iam");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/core");
const path = require("path");
/**
 * An internal class used to adopt an ECR repository used for the locally built
 * image into the stack.
 *
 * Since the repository is not created by the stack (but by the CDK toolkit),
 * adopting will make the repository "owned" by the stack. It will be cleaned
 * up when the stack gets deleted, to avoid leaving orphaned repositories on
 * stack cleanup.
 */
class AdoptedRepository extends ecr.RepositoryBase {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.policyDocument = new iam.PolicyDocument();
        const fn = new lambda.SingletonFunction(this, 'Function', {
            runtime: lambda.Runtime.NODEJS_8_10,
            lambdaPurpose: 'AdoptEcrRepository',
            handler: 'handler.handler',
            code: lambda.Code.asset(path.join(__dirname, 'adopt-repository')),
            uuid: 'dbc60def-c595-44bc-aa5c-28c95d68f62c',
            timeout: cdk.Duration.minutes(5)
        });
        fn.addToRolePolicy(new iam.PolicyStatement({
            resources: [ecr.Repository.arnForLocalRepository(props.repositoryName, this)],
            actions: [
                'ecr:GetRepositoryPolicy',
                'ecr:SetRepositoryPolicy',
                'ecr:DeleteRepository',
                'ecr:ListImages',
                'ecr:BatchDeleteImage'
            ],
        }));
        const adopter = new cfn.CustomResource(this, 'Resource', {
            resourceType: 'Custom::ECRAdoptedRepository',
            provider: cfn.CustomResourceProvider.lambda(fn),
            properties: {
                RepositoryName: props.repositoryName,
                PolicyDocument: this.policyDocument
            }
        });
        if (fn.role) {
            // Need to explicitly depend on the role's policies, so they are applied before we try to use them
            adopter.node.addDependency(fn.role);
        }
        // we use the Fn::GetAtt with the RepositoryName returned by the custom
        // resource in order to implicitly create a dependency between consumers
        // and the custom resource.
        this.repositoryName = adopter.getAtt('RepositoryName').toString();
        // this this repository is "local" to the stack (in the same region/account)
        // we can render it's ARN from it's name.
        this.repositoryArn = ecr.Repository.arnForLocalRepository(this.repositoryName, this);
    }
    /**
     * Export this repository from the stack
     */
    export() {
        return this.props;
    }
    /**
     * Adds a statement to the repository resource policy.
     *
     * Contrary to normal imported repositories, which no-op here, we can
     * use the custom resource to modify the ECR resource policy if needed.
     */
    addToResourcePolicy(statement) {
        this.policyDocument.addStatements(statement);
    }
}
exports.AdoptedRepository = AdoptedRepository;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRvcHRlZC1yZXBvc2l0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRvcHRlZC1yZXBvc2l0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQW9EO0FBQ3BELHdDQUF5QztBQUN6Qyx3Q0FBeUM7QUFDekMsOENBQStDO0FBQy9DLHFDQUFzQztBQUN0Qyw2QkFBOEI7QUFXOUI7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFhLGlCQUFrQixTQUFRLEdBQUcsQ0FBQyxjQUFjO0lBTXZELFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQW1CLEtBQTZCO1FBQzFGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFENEMsVUFBSyxHQUFMLEtBQUssQ0FBd0I7UUFGM0UsbUJBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUt6RCxNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3hELE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsYUFBYSxFQUFFLG9CQUFvQjtZQUNuQyxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2pFLElBQUksRUFBRSxzQ0FBc0M7WUFDNUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNqQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUN6QyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDN0UsT0FBTyxFQUFFO2dCQUNQLHlCQUF5QjtnQkFDekIseUJBQXlCO2dCQUN6QixzQkFBc0I7Z0JBQ3RCLGdCQUFnQjtnQkFDaEIsc0JBQXNCO2FBQ3ZCO1NBQ0YsQ0FBQyxDQUFDLENBQUM7UUFFSixNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUN2RCxZQUFZLEVBQUUsOEJBQThCO1lBQzVDLFFBQVEsRUFBRSxHQUFHLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUMvQyxVQUFVLEVBQUU7Z0JBQ1YsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO2dCQUNwQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7YUFDcEM7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUU7WUFDWCxrR0FBa0c7WUFDbEcsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsdUVBQXVFO1FBQ3ZFLHdFQUF3RTtRQUN4RSwyQkFBMkI7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFbEUsNEVBQTRFO1FBQzVFLHlDQUF5QztRQUN6QyxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLG1CQUFtQixDQUFDLFNBQThCO1FBQ3ZELElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Q0FDRjtBQXBFRCw4Q0FvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2ZuID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWNsb3VkZm9ybWF0aW9uJyk7XG5pbXBvcnQgZWNyID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWVjcicpO1xuaW1wb3J0IGlhbSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1pYW0nKTtcbmltcG9ydCBsYW1iZGEgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtbGFtYmRhJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY29yZScpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmludGVyZmFjZSBBZG9wdGVkUmVwb3NpdG9yeVByb3BzIHtcbiAgLyoqXG4gICAqIEFuIEVDUiByZXBvc2l0b3J5IHRvIGFkb3B0LiBPbmNlIGFkb3B0ZWQsIHRoZSByZXBvc2l0b3J5IHdpbGxcbiAgICogcHJhY3RpY2FsbHkgYmVjb21lIHBhcnQgb2YgdGhpcyBzdGFjaywgc28gaXQgd2lsbCBiZSByZW1vdmVkIHdoZW5cbiAgICogdGhlIHN0YWNrIGlzIGRlbGV0ZWQuXG4gICAqL1xuICByZXBvc2l0b3J5TmFtZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEFuIGludGVybmFsIGNsYXNzIHVzZWQgdG8gYWRvcHQgYW4gRUNSIHJlcG9zaXRvcnkgdXNlZCBmb3IgdGhlIGxvY2FsbHkgYnVpbHRcbiAqIGltYWdlIGludG8gdGhlIHN0YWNrLlxuICpcbiAqIFNpbmNlIHRoZSByZXBvc2l0b3J5IGlzIG5vdCBjcmVhdGVkIGJ5IHRoZSBzdGFjayAoYnV0IGJ5IHRoZSBDREsgdG9vbGtpdCksXG4gKiBhZG9wdGluZyB3aWxsIG1ha2UgdGhlIHJlcG9zaXRvcnkgXCJvd25lZFwiIGJ5IHRoZSBzdGFjay4gSXQgd2lsbCBiZSBjbGVhbmVkXG4gKiB1cCB3aGVuIHRoZSBzdGFjayBnZXRzIGRlbGV0ZWQsIHRvIGF2b2lkIGxlYXZpbmcgb3JwaGFuZWQgcmVwb3NpdG9yaWVzIG9uXG4gKiBzdGFjayBjbGVhbnVwLlxuICovXG5leHBvcnQgY2xhc3MgQWRvcHRlZFJlcG9zaXRvcnkgZXh0ZW5kcyBlY3IuUmVwb3NpdG9yeUJhc2Uge1xuICBwdWJsaWMgcmVhZG9ubHkgcmVwb3NpdG9yeU5hbWU6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHJlcG9zaXRvcnlBcm46IHN0cmluZztcblxuICBwcml2YXRlIHJlYWRvbmx5IHBvbGljeURvY3VtZW50ID0gbmV3IGlhbS5Qb2xpY3lEb2N1bWVudCgpO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBBZG9wdGVkUmVwb3NpdG9yeVByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGZuID0gbmV3IGxhbWJkYS5TaW5nbGV0b25GdW5jdGlvbih0aGlzLCAnRnVuY3Rpb24nLCB7XG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfOF8xMCxcbiAgICAgIGxhbWJkYVB1cnBvc2U6ICdBZG9wdEVjclJlcG9zaXRvcnknLFxuICAgICAgaGFuZGxlcjogJ2hhbmRsZXIuaGFuZGxlcicsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5hc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnYWRvcHQtcmVwb3NpdG9yeScpKSxcbiAgICAgIHV1aWQ6ICdkYmM2MGRlZi1jNTk1LTQ0YmMtYWE1Yy0yOGM5NWQ2OGY2MmMnLFxuICAgICAgdGltZW91dDogY2RrLkR1cmF0aW9uLm1pbnV0ZXMoNSlcbiAgICB9KTtcblxuICAgIGZuLmFkZFRvUm9sZVBvbGljeShuZXcgaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gICAgICByZXNvdXJjZXM6IFtlY3IuUmVwb3NpdG9yeS5hcm5Gb3JMb2NhbFJlcG9zaXRvcnkocHJvcHMucmVwb3NpdG9yeU5hbWUsIHRoaXMpXSxcbiAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgJ2VjcjpHZXRSZXBvc2l0b3J5UG9saWN5JyxcbiAgICAgICAgJ2VjcjpTZXRSZXBvc2l0b3J5UG9saWN5JyxcbiAgICAgICAgJ2VjcjpEZWxldGVSZXBvc2l0b3J5JyxcbiAgICAgICAgJ2VjcjpMaXN0SW1hZ2VzJyxcbiAgICAgICAgJ2VjcjpCYXRjaERlbGV0ZUltYWdlJ1xuICAgICAgXSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCBhZG9wdGVyID0gbmV3IGNmbi5DdXN0b21SZXNvdXJjZSh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICByZXNvdXJjZVR5cGU6ICdDdXN0b206OkVDUkFkb3B0ZWRSZXBvc2l0b3J5JyxcbiAgICAgIHByb3ZpZGVyOiBjZm4uQ3VzdG9tUmVzb3VyY2VQcm92aWRlci5sYW1iZGEoZm4pLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBSZXBvc2l0b3J5TmFtZTogcHJvcHMucmVwb3NpdG9yeU5hbWUsXG4gICAgICAgIFBvbGljeURvY3VtZW50OiB0aGlzLnBvbGljeURvY3VtZW50XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGZuLnJvbGUpIHtcbiAgICAgIC8vIE5lZWQgdG8gZXhwbGljaXRseSBkZXBlbmQgb24gdGhlIHJvbGUncyBwb2xpY2llcywgc28gdGhleSBhcmUgYXBwbGllZCBiZWZvcmUgd2UgdHJ5IHRvIHVzZSB0aGVtXG4gICAgICBhZG9wdGVyLm5vZGUuYWRkRGVwZW5kZW5jeShmbi5yb2xlKTtcbiAgICB9XG5cbiAgICAvLyB3ZSB1c2UgdGhlIEZuOjpHZXRBdHQgd2l0aCB0aGUgUmVwb3NpdG9yeU5hbWUgcmV0dXJuZWQgYnkgdGhlIGN1c3RvbVxuICAgIC8vIHJlc291cmNlIGluIG9yZGVyIHRvIGltcGxpY2l0bHkgY3JlYXRlIGEgZGVwZW5kZW5jeSBiZXR3ZWVuIGNvbnN1bWVyc1xuICAgIC8vIGFuZCB0aGUgY3VzdG9tIHJlc291cmNlLlxuICAgIHRoaXMucmVwb3NpdG9yeU5hbWUgPSBhZG9wdGVyLmdldEF0dCgnUmVwb3NpdG9yeU5hbWUnKS50b1N0cmluZygpO1xuXG4gICAgLy8gdGhpcyB0aGlzIHJlcG9zaXRvcnkgaXMgXCJsb2NhbFwiIHRvIHRoZSBzdGFjayAoaW4gdGhlIHNhbWUgcmVnaW9uL2FjY291bnQpXG4gICAgLy8gd2UgY2FuIHJlbmRlciBpdCdzIEFSTiBmcm9tIGl0J3MgbmFtZS5cbiAgICB0aGlzLnJlcG9zaXRvcnlBcm4gPSBlY3IuUmVwb3NpdG9yeS5hcm5Gb3JMb2NhbFJlcG9zaXRvcnkodGhpcy5yZXBvc2l0b3J5TmFtZSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0IHRoaXMgcmVwb3NpdG9yeSBmcm9tIHRoZSBzdGFja1xuICAgKi9cbiAgcHVibGljIGV4cG9ydCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgc3RhdGVtZW50IHRvIHRoZSByZXBvc2l0b3J5IHJlc291cmNlIHBvbGljeS5cbiAgICpcbiAgICogQ29udHJhcnkgdG8gbm9ybWFsIGltcG9ydGVkIHJlcG9zaXRvcmllcywgd2hpY2ggbm8tb3AgaGVyZSwgd2UgY2FuXG4gICAqIHVzZSB0aGUgY3VzdG9tIHJlc291cmNlIHRvIG1vZGlmeSB0aGUgRUNSIHJlc291cmNlIHBvbGljeSBpZiBuZWVkZWQuXG4gICAqL1xuICBwdWJsaWMgYWRkVG9SZXNvdXJjZVBvbGljeShzdGF0ZW1lbnQ6IGlhbS5Qb2xpY3lTdGF0ZW1lbnQpIHtcbiAgICB0aGlzLnBvbGljeURvY3VtZW50LmFkZFN0YXRlbWVudHMoc3RhdGVtZW50KTtcbiAgfVxufVxuIl19