"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors/safe");
const fs = require("fs-extra");
const util_1 = require("util");
const stacks_1 = require("./api/cxapp/stacks");
const diff_1 = require("./diff");
const logging_1 = require("./logging");
const serialize_1 = require("./serialize");
// tslint:disable-next-line:no-var-requires
const promptly = require('promptly');
/**
 * Toolkit logic
 *
 * The toolkit takes CDK app models from the `appStacks`
 * object and applies them to the `provisioner`.
 */
class CdkToolkit {
    constructor(props) {
        this.appStacks = props.appStacks;
        this.provisioner = props.provisioner;
    }
    async diff(options) {
        const stacks = await this.appStacks.selectStacks(options.stackNames, {
            extend: options.exclusively ? stacks_1.ExtendedStackSelection.None : stacks_1.ExtendedStackSelection.Upstream,
            defaultBehavior: stacks_1.DefaultSelection.AllStacks
        });
        const strict = !!options.strict;
        const contextLines = options.contextLines || 3;
        const stream = options.stream || process.stderr;
        let ret = 0;
        if (options.templatePath !== undefined) {
            // Compare single stack against fixed template
            if (stacks.length !== 1) {
                throw new Error('Can only select one stack when comparing to fixed template. Use --excusively to avoid selecting multiple stacks.');
            }
            if (!await fs.pathExists(options.templatePath)) {
                throw new Error(`There is no file at ${options.templatePath}`);
            }
            const template = serialize_1.deserializeStructure(await fs.readFile(options.templatePath, { encoding: 'UTF-8' }));
            ret = diff_1.printStackDiff(template, stacks[0], strict, contextLines, options.stream);
        }
        else {
            // Compare N stacks against deployed templates
            for (const stack of stacks) {
                stream.write(util_1.format('Stack %s\n', colors.bold(stack.name)));
                const currentTemplate = await this.provisioner.readCurrentTemplate(stack);
                if (diff_1.printStackDiff(currentTemplate, stack, !!options.strict, options.contextLines || 3, stream) !== 0) {
                    ret = 1;
                }
            }
        }
        return ret;
    }
    async deploy(options) {
        const requireApproval = options.requireApproval !== undefined ? options.requireApproval : diff_1.RequireApproval.Broadening;
        const stacks = await this.appStacks.selectStacks(options.stackNames, {
            extend: options.exclusively ? stacks_1.ExtendedStackSelection.None : stacks_1.ExtendedStackSelection.Upstream,
            defaultBehavior: stacks_1.DefaultSelection.OnlySingle
        });
        this.appStacks.processMetadata(stacks);
        for (const stack of stacks) {
            if (stacks.length !== 1) {
                logging_1.highlight(stack.name);
            }
            if (!stack.environment) {
                // tslint:disable-next-line:max-line-length
                throw new Error(`Stack ${stack.name} does not define an environment, and AWS credentials could not be obtained from standard locations or no region was configured.`);
            }
            if (requireApproval !== diff_1.RequireApproval.Never) {
                const currentTemplate = await this.provisioner.readCurrentTemplate(stack);
                if (diff_1.printSecurityDiff(currentTemplate, stack, requireApproval)) {
                    // only talk to user if STDIN is a terminal (otherwise, fail)
                    if (!process.stdin.isTTY) {
                        throw new Error('"--require-approval" is enabled and stack includes security-sensitive updates, ' +
                            'but terminal (TTY) is not attached so we are unable to get a confirmation from the user');
                    }
                    const confirmed = await promptly.confirm(`Do you wish to deploy these changes (y/n)?`);
                    if (!confirmed) {
                        throw new Error('Aborted by user');
                    }
                }
            }
            if (stack.name !== stack.originalName) {
                logging_1.print('%s: deploying... (was %s)', colors.bold(stack.name), colors.bold(stack.originalName));
            }
            else {
                logging_1.print('%s: deploying...', colors.bold(stack.name));
            }
            if (!options.tags || options.tags.length === 0) {
                options.tags = this.appStacks.getTagsFromStackMetadata(stack);
            }
            try {
                const result = await this.provisioner.deployStack({
                    stack,
                    deployName: stack.name,
                    roleArn: options.roleArn,
                    ci: options.ci,
                    toolkitStackName: options.toolkitStackName,
                    reuseAssets: options.reuseAssets,
                    tags: options.tags
                });
                const message = result.noOp
                    ? ` ✅  %s (no changes)`
                    : ` ✅  %s`;
                logging_1.success('\n' + message, stack.name);
                if (Object.keys(result.outputs).length > 0) {
                    logging_1.print('\nOutputs:');
                }
                for (const name of Object.keys(result.outputs)) {
                    const value = result.outputs[name];
                    logging_1.print('%s.%s = %s', colors.cyan(stack.name), colors.cyan(name), colors.underline(colors.cyan(value)));
                }
                logging_1.print('\nStack ARN:');
                logging_1.data(result.stackArn);
            }
            catch (e) {
                logging_1.error('\n ❌  %s failed: %s', colors.bold(stack.name), e);
                throw e;
            }
        }
    }
}
exports.CdkToolkit = CdkToolkit;
//# sourceMappingURL=data:application/json;base64,