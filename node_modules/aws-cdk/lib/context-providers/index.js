"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const logging_1 = require("../logging");
const availability_zones_1 = require("./availability-zones");
const hosted_zones_1 = require("./hosted-zones");
const ssm_parameters_1 = require("./ssm-parameters");
const vpcs_1 = require("./vpcs");
/**
 * Iterate over the list of missing context values and invoke the appropriate providers from the map to retrieve them
 */
async function provideContextValues(missingValues, context, sdk) {
    for (const missingContext of missingValues) {
        const key = missingContext.key;
        const constructor = availableContextProviders[missingContext.provider];
        if (!constructor) {
            // tslint:disable-next-line:max-line-length
            throw new Error(`Unrecognized context provider name: ${missingContext.provider}. You might need to update the toolkit to match the version of the construct library.`);
        }
        const provider = new constructor(sdk);
        const value = await provider.getValue(missingContext.props);
        context.set(key, value);
        logging_1.debug(`Setting "${key}" context to ${JSON.stringify(value)}`);
    }
}
exports.provideContextValues = provideContextValues;
const availableContextProviders = {
    [cxapi.AVAILABILITY_ZONE_PROVIDER]: availability_zones_1.AZContextProviderPlugin,
    [cxapi.SSM_PARAMETER_PROVIDER]: ssm_parameters_1.SSMContextProviderPlugin,
    [cxapi.HOSTED_ZONE_PROVIDER]: hosted_zones_1.HostedZoneContextProviderPlugin,
    [cxapi.VPC_PROVIDER]: vpcs_1.VpcNetworkContextProviderPlugin,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUEwQztBQUUxQyx3Q0FBbUM7QUFFbkMsNkRBQStEO0FBQy9ELGlEQUFpRTtBQUVqRSxxREFBNEQ7QUFDNUQsaUNBQXlEO0FBS3pEOztHQUVHO0FBQ0ksS0FBSyxVQUFVLG9CQUFvQixDQUN4QyxhQUFxQyxFQUNyQyxPQUFnQixFQUNoQixHQUFTO0lBQ1QsS0FBSyxNQUFNLGNBQWMsSUFBSSxhQUFhLEVBQUU7UUFDMUMsTUFBTSxHQUFHLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQztRQUMvQixNQUFNLFdBQVcsR0FBRyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQiwyQ0FBMkM7WUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsY0FBYyxDQUFDLFFBQVEsdUZBQXVGLENBQUMsQ0FBQztTQUN4SztRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRDLE1BQU0sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEIsZUFBSyxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDL0Q7QUFDSCxDQUFDO0FBbEJELG9EQWtCQztBQUVELE1BQU0seUJBQXlCLEdBQWdCO0lBQzdDLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsNENBQXVCO0lBQzNELENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEVBQUUseUNBQXdCO0lBQ3hELENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsOENBQStCO0lBQzdELENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLHNDQUErQjtDQUN0RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGN4YXBpID0gcmVxdWlyZSgnQGF3cy1jZGsvY3gtYXBpJyk7XG5pbXBvcnQgeyBJU0RLIH0gZnJvbSAnLi4vYXBpL3V0aWwvc2RrJztcbmltcG9ydCB7IGRlYnVnIH0gZnJvbSAnLi4vbG9nZ2luZyc7XG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAnLi4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgQVpDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL2F2YWlsYWJpbGl0eS16b25lcyc7XG5pbXBvcnQgeyBIb3N0ZWRab25lQ29udGV4dFByb3ZpZGVyUGx1Z2luIH0gZnJvbSAnLi9ob3N0ZWQtem9uZXMnO1xuaW1wb3J0IHsgQ29udGV4dFByb3ZpZGVyUGx1Z2luIH0gZnJvbSAnLi9wcm92aWRlcic7XG5pbXBvcnQgeyBTU01Db250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL3NzbS1wYXJhbWV0ZXJzJztcbmltcG9ydCB7IFZwY05ldHdvcmtDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL3ZwY3MnO1xuXG50eXBlIFByb3ZpZGVyQ29uc3RydWN0b3IgPSAgKG5ldyAoc2RrOiBJU0RLKSA9PiBDb250ZXh0UHJvdmlkZXJQbHVnaW4pO1xuZXhwb3J0IHR5cGUgUHJvdmlkZXJNYXAgPSB7W25hbWU6IHN0cmluZ106IFByb3ZpZGVyQ29uc3RydWN0b3J9O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciB0aGUgbGlzdCBvZiBtaXNzaW5nIGNvbnRleHQgdmFsdWVzIGFuZCBpbnZva2UgdGhlIGFwcHJvcHJpYXRlIHByb3ZpZGVycyBmcm9tIHRoZSBtYXAgdG8gcmV0cmlldmUgdGhlbVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvdmlkZUNvbnRleHRWYWx1ZXMoXG4gIG1pc3NpbmdWYWx1ZXM6IGN4YXBpLk1pc3NpbmdDb250ZXh0W10sXG4gIGNvbnRleHQ6IENvbnRleHQsXG4gIHNkazogSVNESykge1xuICBmb3IgKGNvbnN0IG1pc3NpbmdDb250ZXh0IG9mIG1pc3NpbmdWYWx1ZXMpIHtcbiAgICBjb25zdCBrZXkgPSBtaXNzaW5nQ29udGV4dC5rZXk7XG4gICAgY29uc3QgY29uc3RydWN0b3IgPSBhdmFpbGFibGVDb250ZXh0UHJvdmlkZXJzW21pc3NpbmdDb250ZXh0LnByb3ZpZGVyXTtcbiAgICBpZiAoIWNvbnN0cnVjdG9yKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBjb250ZXh0IHByb3ZpZGVyIG5hbWU6ICR7bWlzc2luZ0NvbnRleHQucHJvdmlkZXJ9LiBZb3UgbWlnaHQgbmVlZCB0byB1cGRhdGUgdGhlIHRvb2xraXQgdG8gbWF0Y2ggdGhlIHZlcnNpb24gb2YgdGhlIGNvbnN0cnVjdCBsaWJyYXJ5LmApO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGNvbnN0cnVjdG9yKHNkayk7XG5cbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHByb3ZpZGVyLmdldFZhbHVlKG1pc3NpbmdDb250ZXh0LnByb3BzKTtcbiAgICBjb250ZXh0LnNldChrZXksIHZhbHVlKTtcbiAgICBkZWJ1ZyhgU2V0dGluZyBcIiR7a2V5fVwiIGNvbnRleHQgdG8gJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gIH1cbn1cblxuY29uc3QgYXZhaWxhYmxlQ29udGV4dFByb3ZpZGVyczogUHJvdmlkZXJNYXAgPSB7XG4gIFtjeGFwaS5BVkFJTEFCSUxJVFlfWk9ORV9QUk9WSURFUl06IEFaQ29udGV4dFByb3ZpZGVyUGx1Z2luLFxuICBbY3hhcGkuU1NNX1BBUkFNRVRFUl9QUk9WSURFUl06IFNTTUNvbnRleHRQcm92aWRlclBsdWdpbixcbiAgW2N4YXBpLkhPU1RFRF9aT05FX1BST1ZJREVSXTogSG9zdGVkWm9uZUNvbnRleHRQcm92aWRlclBsdWdpbixcbiAgW2N4YXBpLlZQQ19QUk9WSURFUl06IFZwY05ldHdvcmtDb250ZXh0UHJvdmlkZXJQbHVnaW4sXG59O1xuIl19