"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const deploy_stack_1 = require("./deploy-stack");
// tslint:disable:max-line-length
/** @experimental */
exports.BUCKET_NAME_OUTPUT = 'BucketName';
/** @experimental */
exports.BUCKET_DOMAIN_NAME_OUTPUT = 'BucketDomainName';
/** @experimental */
async function bootstrapEnvironment(environment, aws, toolkitStackName, roleArn, toolkitBucketName) {
    const template = {
        Description: "The CDK Toolkit Stack. It was created by `cdk bootstrap` and manages resources necessary for managing your Cloud Applications with AWS CDK.",
        Resources: {
            StagingBucket: {
                Type: "AWS::S3::Bucket",
                Properties: {
                    BucketName: toolkitBucketName,
                    AccessControl: "Private",
                    BucketEncryption: { ServerSideEncryptionConfiguration: [{ ServerSideEncryptionByDefault: { SSEAlgorithm: "aws:kms" } }] }
                }
            }
        },
        Outputs: {
            [exports.BUCKET_NAME_OUTPUT]: {
                Description: "The name of the S3 bucket owned by the CDK toolkit stack",
                Value: { Ref: "StagingBucket" }
            },
            [exports.BUCKET_DOMAIN_NAME_OUTPUT]: {
                Description: "The domain name of the S3 bucket owned by the CDK toolkit stack",
                Value: { "Fn::GetAtt": ["StagingBucket", "DomainName"] }
            }
        }
    };
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    const templateFile = `${toolkitStackName}.template.json`;
    await fs.writeJson(path.join(builder.outdir, templateFile), template, { spaces: 2 });
    builder.addArtifact(toolkitStackName, {
        type: cxapi.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile
        },
    });
    const assembly = builder.build();
    return await deploy_stack_1.deployStack({ stack: assembly.getStack(toolkitStackName), sdk: aws, roleArn });
}
exports.bootstrapEnvironment = bootstrapEnvironment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTBDO0FBQzFDLCtCQUFnQztBQUNoQyx5QkFBMEI7QUFDMUIsNkJBQThCO0FBQzlCLGlEQUFnRTtBQUdoRSxpQ0FBaUM7QUFFakMsb0JBQW9CO0FBQ1AsUUFBQSxrQkFBa0IsR0FBRyxZQUFZLENBQUM7QUFDL0Msb0JBQW9CO0FBQ1AsUUFBQSx5QkFBeUIsR0FBRyxrQkFBa0IsQ0FBQztBQUU1RCxvQkFBb0I7QUFDYixLQUFLLFVBQVUsb0JBQW9CLENBQUMsV0FBOEIsRUFBRSxHQUFTLEVBQUUsZ0JBQXdCLEVBQUUsT0FBMkIsRUFBRSxpQkFBcUM7SUFFaEwsTUFBTSxRQUFRLEdBQUc7UUFDZixXQUFXLEVBQUUsNklBQTZJO1FBQzFKLFNBQVMsRUFBRTtZQUNULGFBQWEsRUFBRTtnQkFDYixJQUFJLEVBQUUsaUJBQWlCO2dCQUN2QixVQUFVLEVBQUU7b0JBQ1YsVUFBVSxFQUFFLGlCQUFpQjtvQkFDN0IsYUFBYSxFQUFFLFNBQVM7b0JBQ3hCLGdCQUFnQixFQUFFLEVBQUUsaUNBQWlDLEVBQUUsQ0FBQyxFQUFFLDZCQUE2QixFQUFFLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRTtpQkFDMUg7YUFDRjtTQUNGO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsQ0FBQywwQkFBa0IsQ0FBQyxFQUFFO2dCQUNwQixXQUFXLEVBQUUsMERBQTBEO2dCQUN2RSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFO2FBQ2hDO1lBQ0QsQ0FBQyxpQ0FBeUIsQ0FBQyxFQUFFO2dCQUMzQixXQUFXLEVBQUUsaUVBQWlFO2dCQUM5RSxLQUFLLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLEVBQUU7YUFDekQ7U0FDRjtLQUNGLENBQUM7SUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUN6RSxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RCxNQUFNLFlBQVksR0FBRyxHQUFHLGdCQUFnQixnQkFBZ0IsQ0FBQztJQUV6RCxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXJGLE9BQU8sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7UUFDcEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsd0JBQXdCO1FBQ2pELFdBQVcsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNuRixVQUFVLEVBQUU7WUFDVixZQUFZO1NBQ2I7S0FDRixDQUFDLENBQUM7SUFFSCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakMsT0FBTyxNQUFNLDBCQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5RixDQUFDO0FBMUNELG9EQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjeGFwaSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2N4LWFwaScpO1xuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmltcG9ydCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCB7IGRlcGxveVN0YWNrLCBEZXBsb3lTdGFja1Jlc3VsdCB9IGZyb20gJy4vZGVwbG95LXN0YWNrJztcbmltcG9ydCB7IElTREsgfSBmcm9tICcuL3V0aWwvc2RrJztcblxuLy8gdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoXG5cbi8qKiBAZXhwZXJpbWVudGFsICovXG5leHBvcnQgY29uc3QgQlVDS0VUX05BTUVfT1VUUFVUID0gJ0J1Y2tldE5hbWUnO1xuLyoqIEBleHBlcmltZW50YWwgKi9cbmV4cG9ydCBjb25zdCBCVUNLRVRfRE9NQUlOX05BTUVfT1VUUFVUID0gJ0J1Y2tldERvbWFpbk5hbWUnO1xuXG4vKiogQGV4cGVyaW1lbnRhbCAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJvb3RzdHJhcEVudmlyb25tZW50KGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudCwgYXdzOiBJU0RLLCB0b29sa2l0U3RhY2tOYW1lOiBzdHJpbmcsIHJvbGVBcm46IHN0cmluZyB8IHVuZGVmaW5lZCwgdG9vbGtpdEJ1Y2tldE5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcblxuICBjb25zdCB0ZW1wbGF0ZSA9IHtcbiAgICBEZXNjcmlwdGlvbjogXCJUaGUgQ0RLIFRvb2xraXQgU3RhY2suIEl0IHdhcyBjcmVhdGVkIGJ5IGBjZGsgYm9vdHN0cmFwYCBhbmQgbWFuYWdlcyByZXNvdXJjZXMgbmVjZXNzYXJ5IGZvciBtYW5hZ2luZyB5b3VyIENsb3VkIEFwcGxpY2F0aW9ucyB3aXRoIEFXUyBDREsuXCIsXG4gICAgUmVzb3VyY2VzOiB7XG4gICAgICBTdGFnaW5nQnVja2V0OiB7XG4gICAgICAgIFR5cGU6IFwiQVdTOjpTMzo6QnVja2V0XCIsXG4gICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICBCdWNrZXROYW1lOiB0b29sa2l0QnVja2V0TmFtZSxcbiAgICAgICAgICBBY2Nlc3NDb250cm9sOiBcIlByaXZhdGVcIixcbiAgICAgICAgICBCdWNrZXRFbmNyeXB0aW9uOiB7IFNlcnZlclNpZGVFbmNyeXB0aW9uQ29uZmlndXJhdGlvbjogW3sgU2VydmVyU2lkZUVuY3J5cHRpb25CeURlZmF1bHQ6IHsgU1NFQWxnb3JpdGhtOiBcImF3czprbXNcIiB9IH1dIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgT3V0cHV0czoge1xuICAgICAgW0JVQ0tFVF9OQU1FX09VVFBVVF06IHtcbiAgICAgICAgRGVzY3JpcHRpb246IFwiVGhlIG5hbWUgb2YgdGhlIFMzIGJ1Y2tldCBvd25lZCBieSB0aGUgQ0RLIHRvb2xraXQgc3RhY2tcIixcbiAgICAgICAgVmFsdWU6IHsgUmVmOiBcIlN0YWdpbmdCdWNrZXRcIiB9XG4gICAgICB9LFxuICAgICAgW0JVQ0tFVF9ET01BSU5fTkFNRV9PVVRQVVRdOiB7XG4gICAgICAgIERlc2NyaXB0aW9uOiBcIlRoZSBkb21haW4gbmFtZSBvZiB0aGUgUzMgYnVja2V0IG93bmVkIGJ5IHRoZSBDREsgdG9vbGtpdCBzdGFja1wiLFxuICAgICAgICBWYWx1ZTogeyBcIkZuOjpHZXRBdHRcIjogW1wiU3RhZ2luZ0J1Y2tldFwiLCBcIkRvbWFpbk5hbWVcIl0gfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBvdXRkaXIgPSBhd2FpdCBmcy5ta2R0ZW1wKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2Nkay1ib290c3RyYXAnKSk7XG4gIGNvbnN0IGJ1aWxkZXIgPSBuZXcgY3hhcGkuQ2xvdWRBc3NlbWJseUJ1aWxkZXIob3V0ZGlyKTtcbiAgY29uc3QgdGVtcGxhdGVGaWxlID0gYCR7dG9vbGtpdFN0YWNrTmFtZX0udGVtcGxhdGUuanNvbmA7XG5cbiAgYXdhaXQgZnMud3JpdGVKc29uKHBhdGguam9pbihidWlsZGVyLm91dGRpciwgdGVtcGxhdGVGaWxlKSwgdGVtcGxhdGUsIHsgc3BhY2VzOiAyIH0pO1xuXG4gIGJ1aWxkZXIuYWRkQXJ0aWZhY3QodG9vbGtpdFN0YWNrTmFtZSwge1xuICAgIHR5cGU6IGN4YXBpLkFydGlmYWN0VHlwZS5BV1NfQ0xPVURGT1JNQVRJT05fU1RBQ0ssXG4gICAgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50VXRpbHMuZm9ybWF0KGVudmlyb25tZW50LmFjY291bnQsIGVudmlyb25tZW50LnJlZ2lvbiksXG4gICAgcHJvcGVydGllczoge1xuICAgICAgdGVtcGxhdGVGaWxlXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgYXNzZW1ibHkgPSBidWlsZGVyLmJ1aWxkKCk7XG4gIHJldHVybiBhd2FpdCBkZXBsb3lTdGFjayh7IHN0YWNrOiBhc3NlbWJseS5nZXRTdGFjayh0b29sa2l0U3RhY2tOYW1lKSwgc2RrOiBhd3MsIHJvbGVBcm4gfSk7XG59XG4iXX0=