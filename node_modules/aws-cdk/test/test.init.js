"use strict";
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const init_1 = require("../lib/init");
const state = {};
module.exports = {
    async "setUp"(callback) {
        state.previousWorkingDir = process.cwd();
        state.tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'aws-cdk-test'));
        // tslint:disable-next-line:no-console
        console.log('Temporary working directory:', state.tempDir);
        process.chdir(state.tempDir);
        callback();
    },
    async "tearDown"(callback) {
        // tslint:disable-next-line:no-console
        console.log('Switching back to', state.previousWorkingDir, 'cleaning up', state.tempDir);
        process.chdir(state.previousWorkingDir);
        await fs.remove(state.tempDir);
        callback();
    },
    async 'create a TypeScript library project'(test) {
        await init_1.cliInit('lib', 'typescript', false);
        // Check that package.json and lib/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('lib'));
        test.done();
    },
    async 'create a TypeScript app project'(test) {
        await init_1.cliInit('app', 'typescript', false);
        // Check that package.json and bin/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('bin'));
        test.done();
    },
    async 'create a JavaScript app project'(test) {
        await init_1.cliInit('app', 'javascript', false);
        // Check that package.json and bin/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('bin'));
        test.done();
    },
    async 'git directory does not throw off the initer!'(test) {
        fs.mkdirSync('.git');
        await init_1.cliInit('app', 'typescript', false);
        // Check that package.json and bin/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('bin'));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5pbml0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5pbml0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwrQkFBZ0M7QUFFaEMseUJBQTBCO0FBQzFCLDZCQUE4QjtBQUM5QixzQ0FBc0M7QUFFdEMsTUFBTSxLQUFLLEdBR1AsRUFBRSxDQUFDO0FBRVAsaUJBQVM7SUFDUCxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQW9CO1FBQ2hDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDekMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN6RSxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFvQjtRQUNuQyxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBbUIsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBUSxDQUFDLENBQUM7UUFFaEMsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLElBQVU7UUFDcEQsTUFBTSxjQUFPLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUxQyx3RUFBd0U7UUFDeEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxJQUFVO1FBQ2hELE1BQU0sY0FBTyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFMUMsd0VBQXdFO1FBQ3hFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsaUNBQWlDLENBQUMsSUFBVTtRQUNoRCxNQUFNLGNBQU8sQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTFDLHdFQUF3RTtRQUN4RSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLElBQVU7UUFDN0QsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVyQixNQUFNLGNBQU8sQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTFDLHdFQUF3RTtRQUN4RSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5pbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IHsgY2xpSW5pdCB9IGZyb20gJy4uL2xpYi9pbml0JztcblxuY29uc3Qgc3RhdGU6IHtcbiAgcHJldmlvdXNXb3JraW5nRGlyPzogc3RyaW5nO1xuICB0ZW1wRGlyPzogc3RyaW5nO1xufSA9IHt9O1xuXG5leHBvcnQgPSB7XG4gIGFzeW5jIFwic2V0VXBcIihjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgIHN0YXRlLnByZXZpb3VzV29ya2luZ0RpciA9IHByb2Nlc3MuY3dkKCk7XG4gICAgc3RhdGUudGVtcERpciA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAnYXdzLWNkay10ZXN0JykpO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coJ1RlbXBvcmFyeSB3b3JraW5nIGRpcmVjdG9yeTonLCBzdGF0ZS50ZW1wRGlyKTtcbiAgICBwcm9jZXNzLmNoZGlyKHN0YXRlLnRlbXBEaXIpO1xuICAgIGNhbGxiYWNrKCk7XG4gIH0sXG5cbiAgYXN5bmMgXCJ0ZWFyRG93blwiKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygnU3dpdGNoaW5nIGJhY2sgdG8nLCBzdGF0ZS5wcmV2aW91c1dvcmtpbmdEaXIsICdjbGVhbmluZyB1cCcsIHN0YXRlLnRlbXBEaXIpO1xuICAgIHByb2Nlc3MuY2hkaXIoc3RhdGUucHJldmlvdXNXb3JraW5nRGlyISk7XG4gICAgYXdhaXQgZnMucmVtb3ZlKHN0YXRlLnRlbXBEaXIhKTtcblxuICAgIGNhbGxiYWNrKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ2NyZWF0ZSBhIFR5cGVTY3JpcHQgbGlicmFyeSBwcm9qZWN0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgYXdhaXQgY2xpSW5pdCgnbGliJywgJ3R5cGVzY3JpcHQnLCBmYWxzZSk7XG5cbiAgICAvLyBDaGVjayB0aGF0IHBhY2thZ2UuanNvbiBhbmQgbGliLyBnb3QgY3JlYXRlZCBpbiB0aGUgY3VycmVudCBkaXJlY3RvcnlcbiAgICB0ZXN0LmVxdWFsKHRydWUsIGF3YWl0IGZzLnBhdGhFeGlzdHMoJ3BhY2thZ2UuanNvbicpKTtcbiAgICB0ZXN0LmVxdWFsKHRydWUsIGF3YWl0IGZzLnBhdGhFeGlzdHMoJ2xpYicpKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gIGFzeW5jICdjcmVhdGUgYSBUeXBlU2NyaXB0IGFwcCBwcm9qZWN0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgYXdhaXQgY2xpSW5pdCgnYXBwJywgJ3R5cGVzY3JpcHQnLCBmYWxzZSk7XG5cbiAgICAvLyBDaGVjayB0aGF0IHBhY2thZ2UuanNvbiBhbmQgYmluLyBnb3QgY3JlYXRlZCBpbiB0aGUgY3VycmVudCBkaXJlY3RvcnlcbiAgICB0ZXN0LmVxdWFsKHRydWUsIGF3YWl0IGZzLnBhdGhFeGlzdHMoJ3BhY2thZ2UuanNvbicpKTtcbiAgICB0ZXN0LmVxdWFsKHRydWUsIGF3YWl0IGZzLnBhdGhFeGlzdHMoJ2JpbicpKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gIGFzeW5jICdjcmVhdGUgYSBKYXZhU2NyaXB0IGFwcCBwcm9qZWN0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgYXdhaXQgY2xpSW5pdCgnYXBwJywgJ2phdmFzY3JpcHQnLCBmYWxzZSk7XG5cbiAgICAvLyBDaGVjayB0aGF0IHBhY2thZ2UuanNvbiBhbmQgYmluLyBnb3QgY3JlYXRlZCBpbiB0aGUgY3VycmVudCBkaXJlY3RvcnlcbiAgICB0ZXN0LmVxdWFsKHRydWUsIGF3YWl0IGZzLnBhdGhFeGlzdHMoJ3BhY2thZ2UuanNvbicpKTtcbiAgICB0ZXN0LmVxdWFsKHRydWUsIGF3YWl0IGZzLnBhdGhFeGlzdHMoJ2JpbicpKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gIGFzeW5jICdnaXQgZGlyZWN0b3J5IGRvZXMgbm90IHRocm93IG9mZiB0aGUgaW5pdGVyIScodGVzdDogVGVzdCkge1xuICAgIGZzLm1rZGlyU3luYygnLmdpdCcpO1xuXG4gICAgYXdhaXQgY2xpSW5pdCgnYXBwJywgJ3R5cGVzY3JpcHQnLCBmYWxzZSk7XG5cbiAgICAvLyBDaGVjayB0aGF0IHBhY2thZ2UuanNvbiBhbmQgYmluLyBnb3QgY3JlYXRlZCBpbiB0aGUgY3VycmVudCBkaXJlY3RvcnlcbiAgICB0ZXN0LmVxdWFsKHRydWUsIGF3YWl0IGZzLnBhdGhFeGlzdHMoJ3BhY2thZ2UuanNvbicpKTtcbiAgICB0ZXN0LmVxdWFsKHRydWUsIGF3YWl0IGZzLnBhdGhFeGlzdHMoJ2JpbicpKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59O1xuIl19