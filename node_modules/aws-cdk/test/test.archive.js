"use strict";
const child_process_1 = require("child_process");
const fs = require("fs-extra");
const jszip = require("jszip");
const os = require("os");
const path = require("path");
const util_1 = require("util");
const archive_1 = require("../lib/archive");
const exec = util_1.promisify(child_process_1.exec);
module.exports = {
    async 'zipDirectory can take a directory and produce a zip from it'(test) {
        const stagingDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
        const zipFile = path.join(stagingDir, 'output.zip');
        const originalDir = path.join(__dirname, 'test-archive');
        const extractDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive.extract'));
        await archive_1.zipDirectory(originalDir, zipFile);
        // unzip and verify that the resulting tree is the same
        await exec(`unzip ${zipFile}`, { cwd: extractDir });
        try {
            await exec(`diff -bur ${originalDir} ${extractDir}`);
        }
        catch (e) {
            test.ok(false, `extracted directory ${extractDir} differs from original ${originalDir}`);
        }
        // inspect the zile file to check that dates are reset
        const zip = await fs.readFile(zipFile);
        const zipData = await jszip.loadAsync(zip);
        const dates = Object.values(zipData.files).map(file => file.date.toISOString());
        test.equal(dates[0], '1980-01-01T00:00:00.000Z', 'Dates are not reset');
        test.equal(new Set(dates).size, 1, 'Dates are not equal');
        await fs.remove(stagingDir);
        await fs.remove(extractDir);
        test.done();
    },
    async 'md5 hash of a zip stays consistent across invocations'(test) {
        const stagingDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
        const zipFile1 = path.join(stagingDir, 'output.zip');
        const zipFile2 = path.join(stagingDir, 'output.zip');
        const originalDir = path.join(__dirname, 'test-archive');
        await archive_1.zipDirectory(originalDir, zipFile1);
        await new Promise(ok => setTimeout(ok, 2000)); // wait 2s
        await archive_1.zipDirectory(originalDir, zipFile2);
        const hash1 = archive_1.contentHash(await fs.readFile(zipFile1));
        const hash2 = archive_1.contentHash(await fs.readFile(zipFile2));
        test.deepEqual(hash1, hash2, 'md5 hash of two zips of the same content are not the same');
        test.done();
    },
    async 'zipDirectory follows symlinks'(test) {
        const originalDir = path.join(__dirname, 'test-archive-follow', 'data');
        const stagingDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
        const zipFile = path.join(stagingDir, 'output.zip');
        const extractDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive.follow'));
        try {
            await archive_1.zipDirectory(originalDir, zipFile);
            await exec(`unzip ${zipFile}`, { cwd: extractDir });
            await exec(`diff -bur ${originalDir} ${extractDir}`);
        }
        catch (e) {
            test.ok(false, `extracted directory ${extractDir} differs from original ${originalDir}, symlinks not followed.`);
        }
        await fs.remove(stagingDir);
        await fs.remove(extractDir);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,