"use strict";
const sinon = require("sinon");
const lib_1 = require("../lib");
const docker_1 = require("../lib/docker");
const os = require("../lib/os");
const mock_sdk_1 = require("./util/mock-sdk");
module.exports = {
    async 'creates repository with given name'(test) {
        // GIVEN
        let createdName;
        const sdk = new mock_sdk_1.MockSDK();
        sdk.stubEcr({
            describeRepositories() {
                return { repositories: [] };
            },
            createRepository(req) {
                createdName = req.repositoryName;
                // Stop the test so that we don't actually docker build
                throw new Error('STOPTEST');
            },
        });
        const toolkit = new lib_1.ToolkitInfo({
            sdk,
            bucketName: 'BUCKET_NAME',
            bucketEndpoint: 'BUCKET_ENDPOINT',
            environment: { name: 'env', account: '1234', region: 'abc' }
        });
        // WHEN
        const asset = {
            id: 'assetId',
            imageNameParameter: 'MyParameter',
            packaging: 'container-image',
            path: '/foo',
            repositoryName: 'some-name',
            sourceHash: '0123456789abcdef',
        };
        try {
            await docker_1.prepareContainerAsset('.', asset, toolkit, false);
        }
        catch (e) {
            if (!/STOPTEST/.test(e.toString())) {
                throw e;
            }
        }
        // THEN
        test.deepEqual(createdName, 'some-name');
        test.done();
    },
    async 'passes the correct args to docker build'(test) {
        // GIVEN
        const toolkit = new lib_1.ToolkitInfo({
            sdk: new mock_sdk_1.MockSDK(),
            bucketName: 'BUCKET_NAME',
            bucketEndpoint: 'BUCKET_ENDPOINT',
            environment: { name: 'env', account: '1234', region: 'abc' }
        });
        const prepareEcrRepositoryStub = sinon.stub(toolkit, 'prepareEcrRepository').resolves({
            repositoryUri: 'uri',
            repositoryName: 'name'
        });
        const shellStub = sinon.stub(os, 'shell').rejects('STOPTEST');
        // WHEN
        const asset = {
            id: 'assetId',
            imageNameParameter: 'MyParameter',
            packaging: 'container-image',
            path: '/foo',
            sourceHash: '1234567890abcdef',
            repositoryName: 'some-name',
            buildArgs: {
                a: 'b',
                c: 'd'
            }
        };
        try {
            await docker_1.prepareContainerAsset('.', asset, toolkit, false);
        }
        catch (e) {
            if (!/STOPTEST/.test(e.toString())) {
                throw e;
            }
        }
        // THEN
        const command = ['docker', 'build', '--build-arg', 'a=b', '--build-arg', 'c=d', '--tag', `uri:latest`, '/foo'];
        test.ok(shellStub.calledWith(command));
        prepareEcrRepositoryStub.restore();
        shellStub.restore();
        test.done();
    },
    async 'relative path'(test) {
        // GIVEN
        const toolkit = new lib_1.ToolkitInfo({
            sdk: new mock_sdk_1.MockSDK(),
            bucketName: 'BUCKET_NAME',
            bucketEndpoint: 'BUCKET_ENDPOINT',
            environment: { name: 'env', account: '1234', region: 'abc' }
        });
        const prepareEcrRepositoryStub = sinon.stub(toolkit, 'prepareEcrRepository').resolves({
            repositoryUri: 'uri',
            repositoryName: 'name'
        });
        const shellStub = sinon.stub(os, 'shell').rejects('STOPTEST');
        // WHEN
        const asset = {
            id: 'assetId',
            imageNameParameter: 'MyParameter',
            packaging: 'container-image',
            path: 'relative-to-assembly',
            sourceHash: '1234567890abcdef',
            repositoryName: 'some-name',
            buildArgs: {
                a: 'b',
                c: 'd'
            }
        };
        try {
            await docker_1.prepareContainerAsset('/assembly/dir/root', asset, toolkit, false);
        }
        catch (e) {
            if (!/STOPTEST/.test(e.toString())) {
                throw e;
            }
        }
        // THEN
        const command = ['docker', 'build', '--build-arg', 'a=b', '--build-arg', 'c=d', '--tag', `uri:latest`, '/assembly/dir/root/relative-to-assembly'];
        test.ok(shellStub.calledWith(command));
        prepareEcrRepositoryStub.restore();
        shellStub.restore();
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,