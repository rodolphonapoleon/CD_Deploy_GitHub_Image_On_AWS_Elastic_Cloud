"use strict";
const stream_1 = require("stream");
const string_decoder_1 = require("string_decoder");
const stacks_1 = require("../lib/api/cxapp/stacks");
const sdk_1 = require("../lib/api/util/sdk");
const cdk_toolkit_1 = require("../lib/cdk-toolkit");
const settings_1 = require("../lib/settings");
const util_1 = require("./util");
const FIXED_RESULT = util_1.testAssembly({
    stackName: 'A',
    template: { resource: 'A' },
}, {
    stackName: 'B',
    depends: ['A'],
    template: { resource: 'B' },
});
const appStacks = new stacks_1.AppStacks({
    configuration: new settings_1.Configuration(),
    aws: new sdk_1.SDK(),
    synthesizer: async () => FIXED_RESULT,
});
class StringWritable extends stream_1.Writable {
    constructor(options = {}) {
        super(options);
        this._decoder = new string_decoder_1.StringDecoder(options && options.defaultEncoding);
        this.data = '';
    }
    _write(chunk, encoding, callback) {
        if (encoding === 'buffer') {
            chunk = this._decoder.write(chunk);
        }
        this.data += chunk;
        callback();
    }
    _final(callback) {
        this.data += this._decoder.end();
        callback();
    }
}
module.exports = {
    async 'diff can diff multiple stacks'(test) {
        // GIVEN
        const provisioner = {
            async readCurrentTemplate(_stack) {
                return {};
            },
            async deployStack(_options) {
                return { noOp: true, outputs: {}, stackArn: '' };
            }
        };
        const toolkit = new cdk_toolkit_1.CdkToolkit({ appStacks, provisioner });
        const buffer = new StringWritable();
        // WHEN
        const exitCode = await toolkit.diff({
            stackNames: ['B'],
            stream: buffer
        });
        // THEN
        const plainTextOutput = buffer.data.replace(/\x1B\[[0-?]*[ -/]*[@-~]/g, '');
        test.ok(plainTextOutput.indexOf('Stack A') > -1, `Did not contain "Stack A": ${plainTextOutput}`);
        test.ok(plainTextOutput.indexOf('Stack B') > -1, `Did not contain "Stack B": ${plainTextOutput}`);
        test.equals(1, exitCode);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5kaWZmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5kaWZmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxtQ0FBa0M7QUFDbEMsbURBQW1FO0FBRW5FLG9EQUFvRDtBQUVwRCw2Q0FBMEM7QUFDMUMsb0RBQWdEO0FBQ2hELDhDQUFnRDtBQUNoRCxpQ0FBc0M7QUFFdEMsTUFBTSxZQUFZLEdBQUcsbUJBQVksQ0FBSztJQUNwQyxTQUFTLEVBQUUsR0FBRztJQUNkLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7Q0FDNUIsRUFDRDtJQUNFLFNBQVMsRUFBRSxHQUFHO0lBQ2QsT0FBTyxFQUFFLENBQUUsR0FBRyxDQUFFO0lBQ2hCLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7Q0FDNUIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxTQUFTLEdBQUcsSUFBSSxrQkFBUyxDQUFDO0lBQzlCLGFBQWEsRUFBRSxJQUFJLHdCQUFhLEVBQUU7SUFDbEMsR0FBRyxFQUFFLElBQUksU0FBRyxFQUFFO0lBQ2QsV0FBVyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsWUFBWTtDQUN0QyxDQUFDLENBQUM7QUFpQ0gsTUFBTSxjQUFlLFNBQVEsaUJBQVE7SUFJbkMsWUFBWSxVQUFlLEVBQUU7UUFDM0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLDhCQUFhLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQVUsRUFBRSxRQUFnQixFQUFFLFFBQTZDO1FBQ3ZGLElBQUksUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUN6QixLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEM7UUFDRCxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQztRQUNuQixRQUFRLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBd0M7UUFDcEQsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2pDLFFBQVEsRUFBRSxDQUFDO0lBQ2IsQ0FBQztDQUNGO0FBckRELGlCQUFTO0lBQ1AsS0FBSyxDQUFDLCtCQUErQixDQUFDLElBQVU7UUFDOUMsUUFBUTtRQUNSLE1BQU0sV0FBVyxHQUFzQjtZQUNyQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsTUFBeUM7Z0JBQ2pFLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQztZQUNELEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBNEI7Z0JBQzVDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBQyxDQUFDO1lBQ2xELENBQUM7U0FDRixDQUFDO1FBQ0YsTUFBTSxPQUFPLEdBQUcsSUFBSSx3QkFBVSxDQUFDLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDM0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUVwQyxPQUFPO1FBQ1AsTUFBTSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ2xDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQztZQUNqQixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsOEJBQThCLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDbEcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLDhCQUE4QixlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBRWxHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXpCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGN4YXBpID0gcmVxdWlyZSgnQGF3cy1jZGsvY3gtYXBpJyk7XG5pbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHsgV3JpdGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgTm9kZVN0cmluZ0RlY29kZXIsIFN0cmluZ0RlY29kZXIgIH0gZnJvbSAnc3RyaW5nX2RlY29kZXInO1xuaW1wb3J0IHsgRGVwbG95U3RhY2tPcHRpb25zLCBEZXBsb3lTdGFja1Jlc3VsdCB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgeyBBcHBTdGFja3MgfSBmcm9tICcuLi9saWIvYXBpL2N4YXBwL3N0YWNrcyc7XG5pbXBvcnQgeyBJRGVwbG95bWVudFRhcmdldCwgVGVtcGxhdGUgfSBmcm9tICcuLi9saWIvYXBpL2RlcGxveW1lbnQtdGFyZ2V0JztcbmltcG9ydCB7IFNESyB9IGZyb20gJy4uL2xpYi9hcGkvdXRpbC9zZGsnO1xuaW1wb3J0IHsgQ2RrVG9vbGtpdCB9IGZyb20gJy4uL2xpYi9jZGstdG9vbGtpdCc7XG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vbGliL3NldHRpbmdzJztcbmltcG9ydCB7IHRlc3RBc3NlbWJseSB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IEZJWEVEX1JFU1VMVCA9IHRlc3RBc3NlbWJseSggICAge1xuICBzdGFja05hbWU6ICdBJyxcbiAgdGVtcGxhdGU6IHsgcmVzb3VyY2U6ICdBJyB9LFxufSxcbntcbiAgc3RhY2tOYW1lOiAnQicsXG4gIGRlcGVuZHM6IFsgJ0EnIF0sXG4gIHRlbXBsYXRlOiB7IHJlc291cmNlOiAnQicgfSxcbn0pO1xuXG5jb25zdCBhcHBTdGFja3MgPSBuZXcgQXBwU3RhY2tzKHtcbiAgY29uZmlndXJhdGlvbjogbmV3IENvbmZpZ3VyYXRpb24oKSxcbiAgYXdzOiBuZXcgU0RLKCksXG4gIHN5bnRoZXNpemVyOiBhc3luYyAoKSA9PiBGSVhFRF9SRVNVTFQsXG59KTtcblxuZXhwb3J0ID0ge1xuICBhc3luYyAnZGlmZiBjYW4gZGlmZiBtdWx0aXBsZSBzdGFja3MnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHByb3Zpc2lvbmVyOiBJRGVwbG95bWVudFRhcmdldCA9IHtcbiAgICAgIGFzeW5jIHJlYWRDdXJyZW50VGVtcGxhdGUoX3N0YWNrOiBjeGFwaS5DbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3QpOiBQcm9taXNlPFRlbXBsYXRlPiB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0sXG4gICAgICBhc3luYyBkZXBsb3lTdGFjayhfb3B0aW9uczogRGVwbG95U3RhY2tPcHRpb25zKTogUHJvbWlzZTxEZXBsb3lTdGFja1Jlc3VsdD4ge1xuICAgICAgICByZXR1cm4geyBub09wOiB0cnVlLCBvdXRwdXRzOiB7fSwgc3RhY2tBcm46ICcnfTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHRvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7IGFwcFN0YWNrcywgcHJvdmlzaW9uZXIgfSk7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFN0cmluZ1dyaXRhYmxlKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZXhpdENvZGUgPSBhd2FpdCB0b29sa2l0LmRpZmYoe1xuICAgICAgc3RhY2tOYW1lczogWydCJ10sXG4gICAgICBzdHJlYW06IGJ1ZmZlclxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGNvbnN0IHBsYWluVGV4dE91dHB1dCA9IGJ1ZmZlci5kYXRhLnJlcGxhY2UoL1xceDFCXFxbWzAtP10qWyAtL10qW0Atfl0vZywgJycpO1xuICAgIHRlc3Qub2socGxhaW5UZXh0T3V0cHV0LmluZGV4T2YoJ1N0YWNrIEEnKSA+IC0xLCBgRGlkIG5vdCBjb250YWluIFwiU3RhY2sgQVwiOiAke3BsYWluVGV4dE91dHB1dH1gKTtcbiAgICB0ZXN0Lm9rKHBsYWluVGV4dE91dHB1dC5pbmRleE9mKCdTdGFjayBCJykgPiAtMSwgYERpZCBub3QgY29udGFpbiBcIlN0YWNrIEJcIjogJHtwbGFpblRleHRPdXRwdXR9YCk7XG5cbiAgICB0ZXN0LmVxdWFscygxLCBleGl0Q29kZSk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcbn07XG5cbmNsYXNzIFN0cmluZ1dyaXRhYmxlIGV4dGVuZHMgV3JpdGFibGUge1xuICBwdWJsaWMgZGF0YTogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IF9kZWNvZGVyOiBOb2RlU3RyaW5nRGVjb2RlcjtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zICYmIG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nKTtcbiAgICB0aGlzLmRhdGEgPSAnJztcbiAgfVxuXG4gIHB1YmxpYyBfd3JpdGUoY2h1bms6IGFueSwgZW5jb2Rpbmc6IHN0cmluZywgY2FsbGJhY2s6IChlcnJvcj86IEVycm9yIHwgdW5kZWZpbmVkKSA9PiB2b2lkKSB7XG4gICAgaWYgKGVuY29kaW5nID09PSAnYnVmZmVyJykge1xuICAgICAgY2h1bmsgPSB0aGlzLl9kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICB9XG4gICAgdGhpcy5kYXRhICs9IGNodW5rO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBwdWJsaWMgX2ZpbmFsKGNhbGxiYWNrOiAoZXJyb3I/OiBFcnJvciB8IG51bGwpID0+IHZvaWQpIHtcbiAgICB0aGlzLmRhdGEgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKTtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59XG4iXX0=