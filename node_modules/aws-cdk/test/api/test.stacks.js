"use strict";
const cxapi = require("@aws-cdk/cx-api");
const nodeunit_1 = require("nodeunit");
const lib_1 = require("../../lib");
const stacks_1 = require("../../lib/api/cxapp/stacks");
const settings_1 = require("../../lib/settings");
const util_1 = require("../util");
function testStacks({ env, versionReporting = true } = {}) {
    const configuration = new settings_1.Configuration();
    configuration.settings.set(['versionReporting'], versionReporting);
    return new stacks_1.AppStacks({
        configuration,
        aws: new lib_1.SDK(),
        synthesizer: async () => util_1.testAssembly({
            stackName: 'withouterrors',
            env,
            template: { resource: 'noerrorresource' },
        }, {
            stackName: 'witherrors',
            env,
            template: { resource: 'errorresource' },
            metadata: {
                '/resource': [
                    {
                        type: cxapi.ERROR_METADATA_KEY,
                        data: 'this is an error'
                    }
                ]
            },
        }),
    });
}
module.exports = nodeunit_1.testCase({
    async 'do not throw when selecting stack without errors'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        const selected = await stacks.selectStacks(['withouterrors'], {
            defaultBehavior: stacks_1.DefaultSelection.AllStacks
        });
        stacks.processMetadata(selected);
        // THEN
        test.equal(selected[0].template.resource, 'noerrorresource');
        test.done();
    },
    async 'do throw when selecting stack with errors'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        try {
            const selected = await stacks.selectStacks(['witherrors'], {
                defaultBehavior: stacks_1.DefaultSelection.AllStacks
            });
            stacks.processMetadata(selected);
            test.ok(false, 'Did not get exception');
        }
        catch (e) {
            test.ok(/Found errors/.test(e.toString()), 'Wrong error');
        }
        test.done();
    },
    async 'select behavior: all'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        const x = await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.AllStacks });
        // THEN
        test.deepEqual(x.length, 2);
        test.done();
    },
    async 'select behavior: none'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        const x = await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.None });
        // THEN
        test.deepEqual(x.length, 0);
        test.done();
    },
    async 'select behavior: single'(test) {
        // GIVEN
        const stacks = testStacks();
        // WHEN
        let thrown;
        try {
            await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.OnlySingle });
        }
        catch (e) {
            thrown = e.message;
        }
        // THEN
        test.ok(thrown && thrown.includes('Since this app includes more than a single stack, specify which stacks to use (wildcards are supported)'));
        test.done();
    },
    'AWS::CDK::Metadata': {
        async 'is generated for relocatable stacks'(test) {
            const stacks = testStacks({ env: `aws://${cxapi.UNKNOWN_ACCOUNT}/${cxapi.UNKNOWN_REGION}`, versionReporting: true });
            const result = await stacks.synthesizeStack('withouterrors');
            const metadata = result.template.Resources && result.template.Resources.CDKMetadata;
            test.deepEqual(metadata, {
                Type: 'AWS::CDK::Metadata',
                Properties: {
                    Modules: `${require('../../package.json').name}=${require('../../package.json').version}`
                }
            });
            test.done();
        },
        async 'is generated for stacks in supported regions'(test) {
            const stacks = testStacks({ env: 'aws://012345678912/us-east-1', versionReporting: true });
            const result = await stacks.synthesizeStack('withouterrors');
            const metadata = result.template.Resources && result.template.Resources.CDKMetadata;
            test.deepEqual(metadata, {
                Type: 'AWS::CDK::Metadata',
                Properties: {
                    Modules: `${require('../../package.json').name}=${require('../../package.json').version}`
                }
            });
            test.done();
        },
        async 'is not generated for stacks in unsupported regions'(test) {
            const stacks = testStacks({ env: 'aws://012345678912/bermuda-triangle-1337', versionReporting: true });
            const result = await stacks.synthesizeStack('withouterrors');
            const metadata = result.template.Resources && result.template.Resources.CDKMetadata;
            test.equal(metadata, undefined);
            test.done();
        }
    },
});
//# sourceMappingURL=data:application/json;base64,